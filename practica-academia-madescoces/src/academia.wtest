import marca.*
import academia.*
import cosa.*
import exceptions.*
import mueble.*

describe "Academia de Magia" {
	
    //Cosas	
    const pelotaFutbol = new Cosa(marca = cuchuFlicto, magica = false, volumen = 3, reliquia = false)
    const escobaGastada = new Cosa(marca = acme, magica = true, volumen = 4, reliquia = true)
    const varitaMagica = new Cosa(marca = fenix, magica = true, volumen = 1, reliquia = false)
    const pavaMateDirector = new Cosa(marca = acme, magica = false, volumen = 2, reliquia = true)
    const lamparaAladino = new Cosa(marca = fenix, magica = true, volumen = 3, reliquia = true)
    
    //Muebles
    const baul = new Baul(volumenMaximo = 5, cosas=[escobaGastada])
    const gabineteMagico = new GabineteMagico(cosas=[varitaMagica], precio = 6)
    const armario = new Armario(maximaCantidadCosas = 2, cosas=[pelotaFutbol])
    const baulMagico = new BaulMagico(volumenMaximo = 12, cosas=[escobaGastada, lamparaAladino])
    
    //Academia
    const academia = new Academia(contenedores=[baul, gabineteMagico, armario])
           	
	method initialize() {
		//pandemia.fase(4)
	} 
           	
	test "punto 1.1: Saber si una cosa está guardada o no en la academia." {
		assert.that(academia.estaEnAcademia(pelotaFutbol))	
		assert.that(academia.estaEnAcademia(escobaGastada))
		assert.that(academia.estaEnAcademia(varitaMagica))
		assert.notThat(academia.estaEnAcademia(pavaMateDirector))
		assert.notThat(academia.estaEnAcademia(lamparaAladino))
	}
	
	test "punto 1.2: Saber en que mueble está guardada una cosa" {
		assert.equals(armario, academia.estaEnElMueble(pelotaFutbol))
		assert.equals(baul, academia.estaEnElMueble(escobaGastada))
		assert.equals(gabineteMagico, academia.estaEnElMueble(varitaMagica))
		assert.notThat(academia.estaEnElMueble(pavaMateDirector))
		assert.notThat(academia.estaEnElMueble(lamparaAladino))	
	}
	
	test "punto 1.3: Saber si una cosa se puede guardar en la academia" {
		assert.that(academia.puedeGuardar(pavaMateDirector))
		armario.maximaCantidadCosas(1)
		assert.notThat(academia.puedeGuardar(pavaMateDirector))
		assert.that(academia.puedeGuardar(lamparaAladino))
		assert.notThat(academia.puedeGuardar(pelotaFutbol))
		assert.notThat(academia.puedeGuardar(escobaGastada))
		assert.notThat(academia.puedeGuardar(varitaMagica))				
	}
	
	test "punto 1.4 Saber en que muebles se podría guardar una cosa" {
		assert.equals([armario],academia.sePuedeGuardarEn(pavaMateDirector))
		assert.equals([gabineteMagico, armario],academia.sePuedeGuardarEn(lamparaAladino))
	}
	
	test "punto 1.5 Guardar algo en la academia" {
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		assert.that(academia.estaEnAcademia(pavaMateDirector))
		assert.that(academia.estaEnAcademia(lamparaAladino))		
	}
	
	test "punto 2.1 Saber la utilidad de un mueble"{
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		assert.equals(1.1, armario.utilidad())
		assert.equals(3, gabineteMagico.utilidad())
		assert.equals(4, baul.utilidad())
		assert.equals(5, baulMagico.utilidad())
	}
	
	test "punto 2.2 Obtener el conjunto de las cosas menos útiles de los muebles de la academia."{
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		assert.equals([escobaGastada,varitaMagica,pelotaFutbol], academia.cosasMenosUtiles())
	}
	
	test "punto 2.3 Saber la marca del elemento menos util"{
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		assert.equals(cuchuFlicto, academia.marcaMenosUtil())
	}
	
	test "punto 2.4 Remover de la academia aquellos elementos que pertenecen al conjunto de las cosas menos útiles "{
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		academia.removerMenosUtiles()
		assert.equals([pavaMateDirector], armario.cosas())
	}
	
	test "punto 2.4.1 Remover de la academia no se puede si hay menos de 3 contenedores "{
		academia.guardarCosa(pavaMateDirector)
		academia.guardarCosa(lamparaAladino)
		academia.removerContenedor(gabineteMagico)
		assert.throwsExceptionLike(new NoPuedoRemvoerException(), {academia.removerMenosUtiles()} )
	}
	
	
}